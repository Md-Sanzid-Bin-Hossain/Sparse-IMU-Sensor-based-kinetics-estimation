# -*- coding: utf-8 -*-
"""Group_1_SOTA_Comparison_Dataset_B_Kinetics_Multi_modal_Estimation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ejPoAG_FYyuW_X3_x_CNUG3xTR9JrZBF
"""

!pip install torchviz
# !pip install tsf


import h5py
import json
import matplotlib.pyplot as plt
import numpy as np
import numpy
import statistics
from numpy import loadtxt
import matplotlib.pyplot as plt
import pandas
import math
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from statistics import stdev
import math
import h5py

import numpy as np
import time

from scipy.signal import butter,filtfilt
import sys
import numpy as np # linear algebra
from scipy.stats import randint
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv), data manipulation as in SQL
import matplotlib.pyplot as plt # this is used for the plot the graph
import seaborn as sns # used for plot interactive graph.
import pandas
import matplotlib.pyplot as plt

# from tsf.model import TransformerForecaster


# from tensorflow.keras.utils import np_utils
import itertools
###  Library for attention layers
import pandas as pd
import os
import numpy as np
#from tqdm import tqdm # Processing time measurement
from sklearn.model_selection import train_test_split

import statistics
import gc
import torch.nn.init as init

############################################################################################################################################################################
############################################################################################################################################################################

import os
import time

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch.nn.utils.weight_norm as weight_norm
from sklearn.preprocessing import StandardScaler


import torch
import torch.nn as nn
from torch.utils.data import TensorDataset, DataLoader
import torch.nn.functional as F
from torchsummary import summary
from torch.nn.parameter import Parameter

from torchsummary import summary



import torch.optim as optim
import gc

from tqdm import tqdm_notebook
from sklearn.preprocessing import MinMaxScaler






# Set random seeds for reproducibility
def set_seed(seed):
    random.seed(seed)  # Python random seed
    np.random.seed(seed)  # NumPy random seed
    torch.manual_seed(seed)  # PyTorch random seed
    torch.cuda.manual_seed(seed)  # PyTorch GPU random seed
    torch.cuda.manual_seed_all(seed)  # If using multi-GPU
    torch.backends.cudnn.deterministic = True  # Ensures deterministic behavior
    torch.backends.cudnn.benchmark = False  # Disable auto-tuner to find best algorithms

# Set your seed value
set_seed(42)



"""# File path

# Data loader
"""

if __name__ == '__main__':
    with h5py.File('/content/drive/My Drive/public dataset/all_17_subjects.h5', 'r') as hf:
        data_all_sub = {subject: subject_data[:] for subject, subject_data in hf.items()}
        data_fields = json.loads(hf.attrs['columns'])

def data_extraction(A):
  for k in range(len(A)):
    zero_index_1=np.all(A[k:k+1,:,:] == 0, axis=0)
    zero_index = np.multiply(zero_index_1, 1)
    zero_index=np.array(zero_index)

    for i in range(len(zero_index)):
      if (sum(zero_index[i])==256):
        index=i
        break;

    # print(index)
### Taking only the stance phase of the gait
###################################################################################################################################################
    B=A[k:k+1,0:index,:]  ### Taking only the stance phase of the gait
    C_1=B.reshape((B.shape[0]*B.shape[1],B.shape[2]))
    if (k==0):
      C=C_1
    else:
      C=np.append(C,C_1,axis=0)

  index_24 = data_fields.index('body weight')
  index_25 = data_fields.index('body height')

  BW=(C[0:1, index_24]*9.8)
  BWH=(C[0:1, index_24]*9.8)*C[:, index_25]

  V=C[:,110:154]
  V=V.reshape(V.shape[0],11,4)

  V=(V-V[:,2:3,:])/C[0:1, index_25]
  V=V.reshape(-1,44)

      ### IMUs- Chest, Waist, Right Foot, Right shank, Right thigh, Left Foot, Left shank, Left thigh, 2D-body coordinate
    ### 0:48- IMU, 48:92-2D body coordinate, 92:97-- Target

  D=np.hstack((C[:,71:77],C[:,58:64],C[:,19:25],C[:,32:38],C[:,45:51],C[:,6:12],C[:,84:90],C[:,97:103],V,C[:,3:5],-C[:, 154:155]/BW,
              -C[:, 156:157]/BW,-C[:, 155:156]/BW))


  # D=np.hstack((C[:,70:76],C[:,57:63],C[:,18:24],C[:,31:37],C[:,44:50],C[:,5:11],C[:,83:89],C[:,96:102],C[:,109:153]))

  return D

# print(np.array(data_fields))

# index_21 = data_fields.index('plate_2_force_x')
# print(index_21)

data_subject_01 = data_all_sub['subject_01']
subject_1=data_extraction(data_subject_01)

print(subject_1.shape)

data_subject_01 = data_all_sub['subject_01']
data_subject_02 = data_all_sub['subject_02']
data_subject_03 = data_all_sub['subject_03']
data_subject_04 = data_all_sub['subject_04']
data_subject_05 = data_all_sub['subject_05']
data_subject_06 = data_all_sub['subject_06']
data_subject_07 = data_all_sub['subject_07']
data_subject_08 = data_all_sub['subject_08']
data_subject_09 = data_all_sub['subject_09']
data_subject_10 = data_all_sub['subject_10']
data_subject_11 = data_all_sub['subject_11']
data_subject_12 = data_all_sub['subject_12']
data_subject_13 = data_all_sub['subject_13']
data_subject_14 = data_all_sub['subject_14']
data_subject_15 = data_all_sub['subject_15']
data_subject_16 = data_all_sub['subject_16']
data_subject_17 = data_all_sub['subject_17']


subject_1=data_extraction(data_subject_01)
subject_2=data_extraction(data_subject_02)
subject_3=data_extraction(data_subject_03)
subject_4=data_extraction(data_subject_04)
subject_5=data_extraction(data_subject_05)
subject_6=data_extraction(data_subject_06)
subject_7=data_extraction(data_subject_07)
subject_8=data_extraction(data_subject_08)
subject_9=data_extraction(data_subject_09)
subject_10=data_extraction(data_subject_10)
subject_11=data_extraction(data_subject_11)
subject_12=data_extraction(data_subject_12)
subject_13=data_extraction(data_subject_13)
subject_14=data_extraction(data_subject_14)
subject_15=data_extraction(data_subject_15)
subject_16=data_extraction(data_subject_16)
subject_17=data_extraction(data_subject_17)

subject_1.shape

"""# Data processing"""

main_dir = "/content/drive/My Drive/public dataset/Public_dataset_2/Subject01"
# os.mkdir(main_dir)
path="/content/"
subject='Subject_01'

train_dataset=np.concatenate((subject_1,subject_2,subject_3,subject_4,subject_5,
                              subject_6,subject_7,subject_8,subject_9,subject_10,subject_11,subject_12,subject_13,subject_14,subject_15,subject_16),axis=0)

test_dataset=subject_17

encoder='CNN'

# Train features #
from sklearn.preprocessing import StandardScaler

# x_train_1=train_dataset[:,0:18]
# x_train_2=train_dataset[:,23:67]

# x_train=np.concatenate((x_train_1,x_train_2),axis=1)

x_train=train_dataset[:,0:92]


scale= StandardScaler()
scaler = MinMaxScaler(feature_range=(0, 1))
train_X_1_1=x_train

# # Test features #
# x_test_1=test_dataset[:,0:18]
# x_test_2=test_dataset[:,23:67]

# x_test=np.concatenate((x_test_1,x_test_2),axis=1)

x_test=test_dataset[:,0:92]

test_X_1_1=x_test

m1=92
m2=97


  ### Label ###

train_y_1_1=train_dataset[:,m1:m2]
test_y_1_1=test_dataset[:,m1:m2]

train_dataset_1=np.concatenate((train_X_1_1,train_y_1_1),axis=1)
test_dataset_1=np.concatenate((test_X_1_1,test_y_1_1),axis=1)

train_dataset_1=pd.DataFrame(train_dataset_1)
test_dataset_1=pd.DataFrame(test_dataset_1)

train_dataset_1.dropna(axis=0,inplace=True)
test_dataset_1.dropna(axis=0,inplace=True)

train_dataset_1=np.array(train_dataset_1)
test_dataset_1=np.array(test_dataset_1)

train_dataset_sum = np. sum(train_dataset_1)
array_has_nan = np. isinf(train_dataset_1[:,48:92])

print(array_has_nan)

print(train_dataset_1.shape)



train_X_1=train_dataset_1[:,0:m1]
test_X_1=test_dataset_1[:,0:m1]

train_y_1=train_dataset_1[:,m1:m2]
test_y_1=test_dataset_1[:,m1:m2]



L1=len(train_X_1)
L2=len(test_X_1)


w=50



a1=L1//w
b1=L1%w

a2=L2//w
b2=L2%w

     #### Features ####
train_X_2=train_X_1[L1-w+b1:L1,:]
test_X_2=test_X_1[L2-w+b2:L2,:]


    #### Output ####

train_y_2=train_y_1[L1-w+b1:L1,:]
test_y_2=test_y_1[L2-w+b2:L2,:]



     #### Features ####

train_X=np.concatenate((train_X_1,train_X_2),axis=0)
test_X=np.concatenate((test_X_1,test_X_2),axis=0)


    #### Output ####

train_y=np.concatenate((train_y_1,train_y_2),axis=0)
test_y=np.concatenate((test_y_1,test_y_2),axis=0)


print(train_y.shape)
    #### Reshaping ####
train_X_3_p= train_X.reshape((a1+1,w,train_X.shape[1]))
test_X = test_X.reshape((a2+1,w,test_X.shape[1]))


train_y_3_p= train_y.reshape((a1+1,w,5))
test_y= test_y.reshape((a2+1,w,5))



# train_X_1D=train_X_3
test_X_1D=test_X

train_X_3=train_X_3_p
train_y_3=train_y_3_p


train_X_1D, X_validation_1D, train_y_5, Y_validation = train_test_split(train_X_3,train_y_3, test_size=0.20, random_state=True)

print(train_X_1D.shape,train_y_5.shape,X_validation_1D.shape,Y_validation.shape)

features=6



Bag_samples=train_X_1D.shape[0]
print(Bag_samples)

s=test_X_1D.shape[0]*w

gc.collect()
gc.collect()
gc.collect()
gc.collect()
gc.collect()
gc.collect()
gc.collect()
gc.collect()

print(train_X_1D.shape)

features=6
train_X_2D=train_X_1D[:,:,0:48].reshape(train_X_1D.shape[0],train_X_1D.shape[1],features,8)
test_X_2D=test_X_1D[:,:,0:48].reshape(test_X_1D[:,:,0:48].shape[0],test_X_1D.shape[1],features,8)
X_validation_2D= X_validation_1D[:,:,0:48].reshape(X_validation_1D.shape[0],X_validation_1D.shape[1],features,8)


print(train_X_2D.shape,test_X_2D.shape,X_validation_2D.shape)

### IMUs- Chest, Waist, Right Foot, Right shank, Right thigh, Left Foot, Left shank, Left thigh, 2D-body coordinate
### 0:48- IMU, 48:92-2D body coordinate, 92:97-- Target


### Data Processing

batch_size = 64

val_targets = torch.Tensor(Y_validation)
test_features_1D = torch.Tensor(test_X_1D)
test_features_2D = torch.Tensor(test_X_2D)
test_targets = torch.Tensor(test_y)


## all Modality Features

train_features_1D = torch.Tensor(train_X_1D)
train_features_2D = torch.Tensor(train_X_2D)
train_targets = torch.Tensor(train_y_5)
val_features_1D = torch.Tensor(X_validation_1D)
val_features_2D = torch.Tensor(X_validation_2D)

print(test_features_2D.shape)
print(train_features_2D.shape)
print(val_features_2D.shape)



train_features_acc_8=torch.cat((train_features_1D[:,:,0:3],train_features_1D[:,:,6:9],train_features_1D[:,:,12:15],train_features_1D[:,:,18:21],train_features_1D[:,:,24:27]\
                             ,train_features_1D[:,:,30:33],train_features_1D[:,:,36:39],train_features_1D[:,:,42:45]),axis=-1)
test_features_acc_8=torch.cat((test_features_1D[:,:,0:3],test_features_1D[:,:,6:9],test_features_1D[:,:,12:15],test_features_1D[:,:,18:21],test_features_1D[:,:,24:27]\
                             ,test_features_1D[:,:,30:33],test_features_1D[:,:,36:39],test_features_1D[:,:,42:45]),axis=-1)
val_features_acc_8=torch.cat((val_features_1D[:,:,0:3],val_features_1D[:,:,6:9],val_features_1D[:,:,12:15],val_features_1D[:,:,18:21],val_features_1D[:,:,24:27]\
                             ,val_features_1D[:,:,30:33],val_features_1D[:,:,36:39],val_features_1D[:,:,42:45]),axis=-1)


train_features_gyr_8=torch.cat((train_features_1D[:,:,3:6],train_features_1D[:,:,9:12],train_features_1D[:,:,15:18],train_features_1D[:,:,21:24],train_features_1D[:,:,27:30]\
                             ,train_features_1D[:,:,33:36],train_features_1D[:,:,39:42],train_features_1D[:,:,45:48]),axis=-1)
test_features_gyr_8=torch.cat((test_features_1D[:,:,3:6],test_features_1D[:,:,9:12],test_features_1D[:,:,15:18],test_features_1D[:,:,21:24],test_features_1D[:,:,27:30]\
                             ,test_features_1D[:,:,33:36],test_features_1D[:,:,39:42],test_features_1D[:,:,45:48]),axis=-1)
val_features_gyr_8=torch.cat((val_features_1D[:,:,3:6],val_features_1D[:,:,9:12],val_features_1D[:,:,15:18],val_features_1D[:,:,21:24],val_features_1D[:,:,27:30]\
                             ,val_features_1D[:,:,33:36],val_features_1D[:,:,39:42],val_features_1D[:,:,45:48]),axis=-1)



train_features_2D_point=train_features_1D[:,:,48:92]
test_features_2D_point=test_features_1D[:,:,48:92]
val_features_2D_point=val_features_1D[:,:,48:92]



train = TensorDataset(train_features_1D[:,:,0:48],train_features_2D, train_features_acc_8,train_features_gyr_8, train_features_2D_point, train_targets)
val = TensorDataset(val_features_1D[:,:,0:48], val_features_2D, val_features_acc_8, val_features_gyr_8, val_features_2D_point,val_targets)
test = TensorDataset(test_features_1D[:,:,0:48],test_features_2D, test_features_acc_8, test_features_gyr_8, test_features_2D_point, test_targets)

train_loader = DataLoader(train, batch_size=batch_size, shuffle=True, drop_last=False)
val_loader = DataLoader(val, batch_size=batch_size, shuffle=True, drop_last=False)
test_loader = DataLoader(test, batch_size=batch_size, shuffle=False, drop_last=False)

print(train_features_2D_point.shape)

"""# Feature Extraction """

def feature_extractor(data):
  feat=[]
  feat_final=[]

  for i in range(48):
      signal=data[:,:,i]
      A_1=np.mean(signal,axis=1)
      A_2=np.sqrt(np.mean(signal ** 2,axis=1))
      A_3=np.min(signal,axis=1)   ## max- Statistical
      A_4=np.max(signal,axis=1)   ## min- Statistical
      A_5=np.mean(np.absolute(signal),axis=1)   ## mean- Statistical
      A_6=np.std(signal,axis=1)  ## standard Deviation- Statistical
      A_7=np.mean(np.abs(np.diff(signal,prepend=data[:,0:1,i],axis=1)),axis=1) ## Mean Absolute Difference
      A_8=np.mean(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1) ## Mean Absolute Difference
      A_9=np.median(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1) ## Mean  Difference
      A_10=np.median(np.abs(np.diff(signal,prepend=data[:,0:1,i],axis=1)),axis=1) ## Mean Absolute Difference
      A_11=np.percentile(signal, 75,axis=1) - np.percentile(signal, 25,axis=1)  # Interquartile Range-- Statistical
      # A_12=scipy.stats.kurtosis(signal,axis=1)   ## Kurtosis--Statistical
      # A_13=scipy.stats.skew(signal,axis=1)       ## Skewness--Statistical
      A_14=np.median(signal,axis=1) ## median- Statistical
      A_15=np.var(signal,axis=1)
      median = np.median(signal, axis=1)
      A_16 = np.median(np.abs(signal - median[:, np.newaxis]), axis=1)
      # A_16=scipy.stats.median_absolute_deviation(signal,axis=1,scale=1)
      A_17=np.mean(np.abs(signal - np.mean(signal, axis=1).reshape(signal.shape[0],1)), axis=1)
      A_18=np.mean(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1)
      dif=np.diff(data[:,:,i],prepend=data[:,0:1,i],axis=1)
      A_19=np.sum(np.absolute(dif),axis=1)  ### Waveform length
      A_20=np.sum(np.absolute(dif>0),axis=1)  ### Zero Crossing
      A_21=np.sum(np.absolute(np.diff(dif,prepend=data[:,0:1,i],axis=1))>0,axis=1)  ## Slope Sign Changes

      feat=np.vstack((A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_14,A_15,A_16,A_17))
      # feat=np.vstack((A_18,A_19,A_20))
      feat_final.append((feat))
  feat_final=np.array(feat_final)
  feat_final_1=feat_final.reshape([feat_final.shape[0]*feat_final.shape[1],feat_final.shape[-1]])
  feat_final_1=np.transpose(feat_final_1)

  return(feat_final_1)



import scipy

X_train_feat=feature_extractor(train_X_1D)
X_test_feat=feature_extractor(test_X_1D)
X_validation_feat=feature_extractor(X_validation_1D)

X_train_feat=torch.Tensor(X_train_feat)
X_test_feat=torch.Tensor(X_test_feat)
X_validation_feat=torch.Tensor(X_validation_feat)

train_feat = TensorDataset(X_train_feat,train_features_2D, train_features_acc_8,train_features_gyr_8, train_features_2D_point, train_targets)
val_feat = TensorDataset(X_validation_feat, val_features_2D, val_features_acc_8, val_features_gyr_8, val_features_2D_point,val_targets)
test_feat = TensorDataset(X_test_feat,test_features_2D, test_features_acc_8, test_features_gyr_8, test_features_2D_point, test_targets)

train_loader_feat = DataLoader(train_feat, batch_size=batch_size, shuffle=True, drop_last=False)
val_loader_feat = DataLoader(val_feat, batch_size=batch_size, shuffle=True, drop_last=False)
test_loader_feat = DataLoader(test_feat, batch_size=batch_size, shuffle=False, drop_last=False)

"""# Important Functions"""

def RMSE_prediction(yhat_4,test_y,s):

  s1=yhat_4.shape[0]*yhat_4.shape[1]

  test_o=test_y.reshape((s1,5))
  yhat=yhat_4.reshape((s1,5))


  y_1_no=yhat[:,0]
  y_2_no=yhat[:,1]
  y_3_no=yhat[:,2]
  y_4_no=yhat[:,3]
  y_5_no=yhat[:,4]


  y_1=y_1_no
  y_2=y_2_no
  y_3=y_3_no
  y_4=y_4_no
  y_5=y_5_no



  y_test_1=test_o[:,0]
  y_test_2=test_o[:,1]
  y_test_3=test_o[:,2]
  y_test_4=test_o[:,3]
  y_test_5=test_o[:,4]



  Z_1=y_1
  Z_2=y_2
  Z_3=y_3
  Z_4=y_4
  Z_5=y_5


  ###calculate RMSE

  rmse_1 =((np.sqrt(mean_squared_error(y_test_1,y_1)))/(max(y_test_1)-min(y_test_1)))*100
  rmse_2 =((np.sqrt(mean_squared_error(y_test_2,y_2)))/(max(y_test_2)-min(y_test_2)))*100
  rmse_3 =((np.sqrt(mean_squared_error(y_test_3,y_3)))/(max(y_test_3)-min(y_test_3)))*100
  rmse_4 =((np.sqrt(mean_squared_error(y_test_4,y_4)))/(max(y_test_4)-min(y_test_4)))*100
  rmse_5 =((np.sqrt(mean_squared_error(y_test_5,y_5)))/(max(y_test_5)-min(y_test_5)))*100

  print(rmse_1)
  print(rmse_2)
  print(rmse_3)
  print(rmse_4)
  print(rmse_5)



  p_1=np.corrcoef(y_1, y_test_1)[0, 1]
  p_2=np.corrcoef(y_2, y_test_2)[0, 1]
  p_3=np.corrcoef(y_3, y_test_3)[0, 1]
  p_4=np.corrcoef(y_4, y_test_4)[0, 1]
  p_5=np.corrcoef(y_5, y_test_5)[0, 1]


  print("\n")
  print(p_1)
  print(p_2)
  print(p_3)
  print(p_4)
  print(p_5)


              ### Correlation ###
  p=np.array([p_1,p_2,p_3,p_4,p_5])


      #### Mean and standard deviation ####

  rmse=np.array([rmse_1,rmse_2,rmse_3,rmse_4,rmse_5])

      #### Mean and standard deviation ####
  m=statistics.mean(rmse)
  SD=statistics.stdev(rmse)
  print('Mean: %.3f' % m,'+/- %.3f' %SD)

  m_c=statistics.mean(p)
  SD_c=statistics.stdev(p)
  print('Mean: %.3f' % m_c,'+/- %.3f' %SD_c)



  return rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5


############################################################################################################################################################################################################################################################################################################################################################################################################################################################################


############################################################################################################################################################################################################################################################################################################################################################################################################################################################################


def PCC_prediction(yhat_4,test_y,s):

  s1=yhat_4.shape[0]*yhat_4.shape[1]

  test_o=test_y.reshape((s1,5))
  yhat=yhat_4.reshape((s1,5))


  y_1_no=yhat[:,0]
  y_2_no=yhat[:,1]
  y_3_no=yhat[:,2]
  y_4_no=yhat[:,3]
  y_5_no=yhat[:,4]


  y_1=y_1_no
  y_2=y_2_no
  y_3=y_3_no
  y_4=y_4_no
  y_5=y_5_no



  y_test_1=test_o[:,0]
  y_test_2=test_o[:,1]
  y_test_3=test_o[:,2]
  y_test_4=test_o[:,3]
  y_test_5=test_o[:,4]



  Y_1=y_1
  Y_2=y_2
  Y_3=y_3
  Y_4=y_4
  Y_5=y_5


  ###calculate RMSE

  rmse_1 =((np.sqrt(mean_squared_error(y_test_1,y_1)))/(max(y_test_1)-min(y_test_1)))*100
  rmse_2 =((np.sqrt(mean_squared_error(y_test_2,y_2)))/(max(y_test_2)-min(y_test_2)))*100
  rmse_3 =((np.sqrt(mean_squared_error(y_test_3,y_3)))/(max(y_test_3)-min(y_test_3)))*100
  rmse_4 =((np.sqrt(mean_squared_error(y_test_4,y_4)))/(max(y_test_4)-min(y_test_4)))*100
  rmse_5 =((np.sqrt(mean_squared_error(y_test_5,y_5)))/(max(y_test_5)-min(y_test_5)))*100

  print(rmse_1)
  print(rmse_2)
  print(rmse_3)
  print(rmse_4)
  print(rmse_5)


  p_1=np.corrcoef(y_1, y_test_1)[0, 1]
  p_2=np.corrcoef(y_2, y_test_2)[0, 1]
  p_3=np.corrcoef(y_3, y_test_3)[0, 1]
  p_4=np.corrcoef(y_4, y_test_4)[0, 1]
  p_5=np.corrcoef(y_5, y_test_5)[0, 1]

  print("\n")
  print(p_1)
  print(p_2)
  print(p_3)
  print(p_4)
  print(p_5)

              ### Correlation ###
  p=np.array([p_1,p_2,p_3,p_4,p_5])


      #### Mean and standard deviation ####

  rmse=np.array([rmse_1,rmse_2,rmse_3,rmse_4,rmse_5])

      #### Mean and standard deviation ####
  m=statistics.mean(rmse)
  SD=statistics.stdev(rmse)
  print('Mean: %.3f' % m,'+/- %.3f' %SD)

  m_c=statistics.mean(p)
  SD_c=statistics.stdev(p)
  print('Mean: %.3f' % m_c,'+/- %.3f' %SD_c)


  return rmse, p, Y_1,Y_2,Y_3,Y_4,Y_5


############################################################################################################################################################################################################################################################################################################################################################################################################################################################################


# def estimate_coef(x, y):
#     # number of observations/points
#     n = np.size(x)

#     # mean of x and y vector
#     m_x = np.mean(x)
#     m_y = np.mean(y)

#     # calculating cross-deviation and deviation about x
#     SS_xy = np.sum(y*x) - n*m_y*m_x
#     SS_xx = np.sum(x*x) - n*m_x*m_x

#     # calculating regression coefficients
#     b_1 = SS_xy / SS_xx
#     b_0 = m_y - b_1*m_x

#     return (b_0, b_1)

def estimate_coef(x, y):
    # Convert input data to PyTorch tensors
    x_tensor = torch.tensor(x, dtype=torch.float32)
    y_tensor = torch.tensor(y, dtype=torch.float32)

    # Calculate the number of observations/points
    n = x_tensor.size(0)

    # Calculate the mean of x and y tensors
    m_x = torch.mean(x_tensor)
    m_y = torch.mean(y_tensor)

    # Calculate cross-deviation and deviation about x
    SS_xy = torch.sum(y_tensor * x_tensor) - n * m_y * m_x
    SS_xx = torch.sum(x_tensor * x_tensor) - n * m_x * m_x

    # Calculate regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x

    return (b_0.item(), b_1.item())

############################################################################################################################################################################################################################################################################################################################################################################################################################################################################




def DLR_prediction(yhat_4,test_y,s,Y_1,Y_2,Y_3,Y_4,Y_5,Z_1,Z_2,Z_3,Z_4,Z_5):

  a_1,b_1=estimate_coef(Y_1,Z_1)
  a_2,b_2=estimate_coef(Y_2,Z_2)
  a_3,b_3=estimate_coef(Y_3,Z_3)
  a_4,b_4=estimate_coef(Y_4,Z_4)
  a_5,b_5=estimate_coef(Y_5,Z_5)

  print(a_1,b_1)
  print(a_2,b_2)
  print(a_3,b_3)
  print(a_4,b_4)
  print(a_5,b_5)


  #### All 16 angles prediction  ####


  s1=yhat_4.shape[0]*yhat_4.shape[1]

  test_o=test_y.reshape((s1,5))
  yhat=yhat_4.reshape((s1,5))


  y_1_no=yhat[:,0]
  y_2_no=yhat[:,1]
  y_3_no=yhat[:,2]
  y_4_no=yhat[:,3]
  y_5_no=yhat[:,4]


  y_1=y_1_no
  y_2=y_2_no
  y_3=y_3_no
  y_4=y_4_no
  y_5=y_5_no


  y_test_1=test_o[:,0]
  y_test_2=test_o[:,1]
  y_test_3=test_o[:,2]
  y_test_4=test_o[:,3]
  y_test_5=test_o[:,4]


  y_1=y_1*b_1+a_1
  y_2=y_2*b_2+a_2
  y_3=y_3*b_3+a_3
  y_4=y_4*b_4+a_4
  y_5=y_5*b_5+a_5


  ###calculate RMSE

  rmse_1 =((np.sqrt(mean_squared_error(y_test_1,y_1)))/(max(y_test_1)-min(y_test_1)))*100
  rmse_2 =((np.sqrt(mean_squared_error(y_test_2,y_2)))/(max(y_test_2)-min(y_test_2)))*100
  rmse_3 =((np.sqrt(mean_squared_error(y_test_3,y_3)))/(max(y_test_3)-min(y_test_3)))*100
  rmse_4 =((np.sqrt(mean_squared_error(y_test_4,y_4)))/(max(y_test_4)-min(y_test_4)))*100
  rmse_5 =((np.sqrt(mean_squared_error(y_test_5,y_5)))/(max(y_test_5)-min(y_test_5)))*100



  print(rmse_1)
  print(rmse_2)
  print(rmse_3)
  print(rmse_4)
  print(rmse_5)




  p_1=np.corrcoef(y_1, y_test_1)[0, 1]
  p_2=np.corrcoef(y_2, y_test_2)[0, 1]
  p_3=np.corrcoef(y_3, y_test_3)[0, 1]
  p_4=np.corrcoef(y_4, y_test_4)[0, 1]
  p_5=np.corrcoef(y_5, y_test_5)[0, 1]


  print("\n")
  print(p_1)
  print(p_2)
  print(p_3)
  print(p_4)
  print(p_5)


              ### Correlation ###
  p=np.array([p_1,p_2,p_3,p_4,p_5])



      #### Mean and standard deviation ####

  rmse=np.array([rmse_1,rmse_2,rmse_3,rmse_4,rmse_5])

      #### Mean and standard deviation ####
  m=statistics.mean(rmse)
  SD=statistics.stdev(rmse)
  print('Mean: %.3f' % m,'+/- %.3f' %SD)

  m_c=statistics.mean(p)
  SD_c=statistics.stdev(p)
  print('Mean: %.3f' % m_c,'+/- %.3f' %SD_c)

  return rmse, p




############################################################################################################################################################################################################################################################################################################################################################################################################################################################################

# torch.cuda.is_available() checks and returns a Boolean True if a GPU is available, else it'll return False
is_cuda = torch.cuda.is_available()

# If we have a GPU available, we'll set our device to GPU. We'll use this device variable later in our code.
if is_cuda:
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

class RMSELoss(nn.Module):
    def __init__(self):
        super(RMSELoss, self).__init__()

    def forward(self, pred, target):
        mse = nn.MSELoss()(pred, target)
        rmse = torch.sqrt(mse)
        return rmse

class PearsonCorrLoss(nn.Module):

  def __init__(self):
    super(PearsonCorrLoss, self).__init__()

  def forward(self, y_true, y_pred):

    # Calculate mean values
    mx = torch.mean(y_true)
    my = torch.mean(y_pred)

    # Calculate differences from mean
    xm, ym = y_true - mx, y_pred - my

    # Calculate numerator and denominator of Pearson correlation coefficient
    r_num = torch.sum(torch.mul(xm, ym))
    r_den = torch.sqrt(torch.mul(torch.sum(torch.square(xm)), torch.sum(torch.square(ym))))

    # Calculate Pearson correlation coefficient
    r = r_num / r_den

    # Clamp r between 0 and 1
    r = torch.clamp(r, 0, 1.0)

    # Calculate l2 loss
    l2 = 1 - torch.square(r)



    return l2

"""## Model"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super().__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):
        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        # print(x.shape)
        x = F.relu(self.conv1(x))
        # print(x.shape)
        x = self.BN_2(x)
        x = self.pool_1(x)
        # print(x.shape)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        # print(x.shape)
        x = F.relu(self.conv3(x))
        x = self.BN_4(x)
        x = self.pool_2(x)
        # print(x.shape)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)
        # print(x.shape)


        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = self.flatten(x)


        return x

"""# IMU- Feet"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()

            data_1D=torch.cat((data[:,:,1:18],data[:,:,30:36]2),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)



            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,12*15:18*15],data[:,30*15:36*15]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                data_1D=torch.cat((data[:,12*15:18*15],data[:,30*15:36*15]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_2D(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_2D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_2D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN(12)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_Feet.pth')

mm_early_ffn= FFN(12)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_Feet.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_1=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(12)


# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()

mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_Feet.pth')

mm_early_lstm= lstm_model(12)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_Feet.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_lstm(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_2=np.hstack([rmse,p])

"""## CNN_2D"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super(Encoder_CNN_2D, self).__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_1= nn.BatchNorm2d(hidden_dim)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_3= nn.BatchNorm2d(output_size)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):

        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        x = F.relu(self.conv1(x))
        x = self.BN_1(x)
        x = self.pool_1(x)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        x = F.relu(self.conv3(x))
        x = self.BN_3(x)
        x = self.pool_2(x)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)

        # print(x.shape)

        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        # print(x.shape)


        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)

        # print(x.shape)
        # x = self.flatten(x)


        return x

class conv2d_model(nn.Module):
    def __init__(self, input_2D):
        super(conv2d_model, self).__init__()

        self.BN_2= nn.BatchNorm2d(input_2D, affine=False)
        self.conv2d = Encoder_CNN_2D(input_2D,0.05)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(96, 5*50)

    def forward(self, inputs_2D_N):

        inputs_2D_N_1=inputs_2D_N.transpose(1,3)
        inputs_2D_N_2=self.BN_2(inputs_2D_N_1)
        inputs_2D_N_3=inputs_2D_N_2.transpose(1,3)

        x=self.conv2d(inputs_2D_N_3)
        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = conv2d_model(2)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_conv2d = train_mm_early_IMU_2D(train_loader, lr, 40, model, path +'Conv2D_IMU_feet.pth')

mm_early_conv2d= conv2d_model(2)
mm_early_conv2d.load_state_dict(torch.load(path+'Conv2D_IMU_feet.pth'))
mm_early_conv2d.to(device)

mm_early_conv2d.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,12:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_conv2d(data_2D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_3=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):



        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(12*15)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Feet.pth')

mm_early_ffn_hf= FFN_HF(12*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Feet.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        data_1D=torch.cat((data[:,12*15:18*15],data[:,30*15:36*15]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_4=np.hstack([rmse,p])

"""# IMU- Feet+Pelvis"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,6*15:18*15],data[:,30*15:36*15]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                data_1D=torch.cat((data[:,6*15:18*15],data[:,30*15:36*15]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_2D(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_2D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_2D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN(18)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()




mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_Feet_Pelvis.pth')

mm_early_ffn= FFN(18)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_Feet_Pelvis.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_5=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(18)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_Feet_Pelvis.pth')

mm_early_lstm= lstm_model(18)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_Feet_Pelvis.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_lstm(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_6=np.hstack([rmse,p])

"""## CNN_2D"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super(Encoder_CNN_2D, self).__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_1= nn.BatchNorm2d(hidden_dim)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_3= nn.BatchNorm2d(output_size)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):

        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        x = F.relu(self.conv1(x))
        x = self.BN_1(x)
        x = self.pool_1(x)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        x = F.relu(self.conv3(x))
        x = self.BN_3(x)
        x = self.pool_2(x)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)

        # print(x.shape)

        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        # print(x.shape)


        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)

        # print(x.shape)
        # x = self.flatten(x)


        return x

class conv2d_model(nn.Module):
    def __init__(self, input_2D):
        super(conv2d_model, self).__init__()

        self.BN_2= nn.BatchNorm2d(input_2D, affine=False)
        self.conv2d = Encoder_CNN_2D(input_2D,0.05)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(96, 5*50)

    def forward(self, inputs_2D_N):

        inputs_2D_N_1=inputs_2D_N.transpose(1,3)
        inputs_2D_N_2=self.BN_2(inputs_2D_N_1)
        inputs_2D_N_3=inputs_2D_N_2.transpose(1,3)

        x=self.conv2d(inputs_2D_N_3)
        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = conv2d_model(3)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_conv2d = train_mm_early_IMU_2D(train_loader, lr, 40, model, path +'Conv2D_IMU_feet_pelvis.pth')

mm_early_conv2d= conv2d_model(3)
mm_early_conv2d.load_state_dict(torch.load(path+'Conv2D_IMU_feet_pelvis.pth'))
mm_early_conv2d.to(device)

mm_early_conv2d.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:18],data[:,:,30:36]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_conv2d(data_2D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_7=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):



        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(18*15)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()


mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Feet_Pelvis.pth')

mm_early_ffn_hf= FFN_HF(18*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Feet_Pelvis.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        data_1D=torch.cat((data[:,6*15:18*15],data[:,30*15:36*15]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_8=np.hstack([rmse,p])

"""# IMU- Feet+Pelvis+shanks"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,6*15:24*15],data[:,30*15:42*15]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                data_1D=torch.cat((data[:,6*15:24*15],data[:,30*15:42*15]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_2D(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

            output= model(data_2D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

                output= model(data_2D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN(30)



mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_Feet_Pelvis_shanks.pth')

mm_early_ffn= FFN(30)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_Feet_Pelvis_shanks.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

        output= mm_early_ffn(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_9=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(30)



mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_Feet_Pelvis_shanks.pth')

mm_early_lstm= lstm_model(30)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_Feet_Pelvis_shanks.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

        output= mm_early_lstm(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_10=np.hstack([rmse,p])

"""## CNN_2D"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super(Encoder_CNN_2D, self).__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_1= nn.BatchNorm2d(hidden_dim)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_3= nn.BatchNorm2d(output_size)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):

        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        x = F.relu(self.conv1(x))
        x = self.BN_1(x)
        x = self.pool_1(x)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        x = F.relu(self.conv3(x))
        x = self.BN_3(x)
        x = self.pool_2(x)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)

        # print(x.shape)

        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        # print(x.shape)


        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)

        # print(x.shape)
        # x = self.flatten(x)


        return x

class conv2d_model(nn.Module):
    def __init__(self, input_2D):
        super(conv2d_model, self).__init__()

        self.BN_2= nn.BatchNorm2d(input_2D, affine=False)
        self.conv2d = Encoder_CNN_2D(input_2D,0.05)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(96, 5*50)

    def forward(self, inputs_2D_N):

        inputs_2D_N_1=inputs_2D_N.transpose(1,3)
        inputs_2D_N_2=self.BN_2(inputs_2D_N_1)
        inputs_2D_N_3=inputs_2D_N_2.transpose(1,3)

        x=self.conv2d(inputs_2D_N_3)
        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = conv2d_model(5)




mm_early_conv2d = train_mm_early_IMU_2D(train_loader, lr, 40, model, path +'Conv2D_IMU_feet_pelvis_shanks.pth')

mm_early_conv2d= conv2d_model(5)
mm_early_conv2d.load_state_dict(torch.load(path+'Conv2D_IMU_feet_pelvis_shanks.pth'))
mm_early_conv2d.to(device)

mm_early_conv2d.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:24],data[:,:,30:42]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:4],data_2D[:,:,:,5:7]),dim=-1)

        output= mm_early_conv2d(data_2D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_11=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):



        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(30*15)



mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Feet_Pelvis_shanks.pth')

mm_early_ffn_hf= FFN_HF(30*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Feet_Pelvis_shanks.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        data_1D=torch.cat((data[:,6*15:24*15],data[:,30*15:42*15]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_12=np.hstack([rmse,p])

"""# IMU- Feet+Pelvis+shanks+Thighs"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data_1D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data_1D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_2D(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
            data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

            output= model(data_2D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                data_1D=torch.cat((data[:,:,6:30],data[:,:,30:42]),dim=-1)
                data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

                output= model(data_2D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN(42)



mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_Feet_Pelvis_shanks_thighs.pth')

mm_early_ffn= FFN(42)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_Feet_Pelvis_shanks_thighs.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_ffn(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_13=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(42)



mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_Feet_Pelvis_shanks_thighs.pth')

mm_early_lstm= lstm_model(42)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_Feet_Pelvis_shanks_thighs.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_lstm(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_14=np.hstack([rmse,p])

"""## CNN_2D"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super(Encoder_CNN_2D, self).__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_1= nn.BatchNorm2d(hidden_dim)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_3= nn.BatchNorm2d(output_size)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):

        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        x = F.relu(self.conv1(x))
        x = self.BN_1(x)
        x = self.pool_1(x)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        x = F.relu(self.conv3(x))
        x = self.BN_3(x)
        x = self.pool_2(x)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)

        # print(x.shape)

        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        # print(x.shape)


        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)

        # print(x.shape)
        # x = self.flatten(x)


        return x

class conv2d_model(nn.Module):
    def __init__(self, input_2D):
        super(conv2d_model, self).__init__()

        self.BN_2= nn.BatchNorm2d(input_2D, affine=False)
        self.conv2d = Encoder_CNN_2D(input_2D,0.05)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(96, 5*50)

    def forward(self, inputs_2D_N):

        inputs_2D_N_1=inputs_2D_N.transpose(1,3)
        inputs_2D_N_2=self.BN_2(inputs_2D_N_1)
        inputs_2D_N_3=inputs_2D_N_2.transpose(1,3)

        x=self.conv2d(inputs_2D_N_3)
        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = conv2d_model(7)



mm_early_conv2d = train_mm_early_IMU_2D(train_loader, lr, 40, model, path +'Conv2D_IMU_feet_pelvis_shanks_thighs.pth')

mm_early_conv2d= conv2d_model(7)
mm_early_conv2d.load_state_dict(torch.load(path+'Conv2D_IMU_feet_pelvis_shanks_thighs.pth'))
mm_early_conv2d.to(device)

mm_early_conv2d.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_conv2d(data_2D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_15=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(42*15)


mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Feet_Pelvis_shanks_thighs.pth')

mm_early_ffn_hf= FFN_HF(42*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Feet_Pelvis_shanks_thighs.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
        data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data_1D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_16=np.hstack([rmse,p])

"""# IMU- Feet+Pelvis+shanks+Thighs+Trunks"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

            output= model(data.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

                output= model(data.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):
            optimizer.zero_grad()
            # data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

            output= model(data.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                # data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

                output= model(data.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

def train_mm_early_IMU_2D(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

            output= model(data_2D.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:42]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

                output= model(data_2D.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-5
model = FFN(48)




mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_Feet_Pelvis_shanks_thighs_trunk.pth')

mm_early_ffn= FFN(48)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_Feet_Pelvis_shanks_thighs_trunk.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_ffn(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_17=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(48)


mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_Feet_Pelvis_shanks_thighs_trunk.pth')

mm_early_lstm= lstm_model(48)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_Feet_Pelvis_shanks_thighs_trunk.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_lstm(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_18=np.hstack([rmse,p])

"""## CNN_2D"""

class Encoder_CNN_2D(nn.Module):
    def __init__(self, input_size, dropout, hidden_dim=256, output_size=512, kernel_size=(3,5), stride=(1,1), padding=(1,2)):
        super(Encoder_CNN_2D, self).__init__()
        self.conv1 = nn.Conv2d(input_size, hidden_dim, kernel_size, stride, padding)
        self.conv2 = nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, padding)
        self.conv3 = nn.Conv2d(hidden_dim, output_size, kernel_size, stride, padding)
        self.conv4 = nn.Conv2d(output_size, output_size, kernel_size, stride, padding)
        self.BN_1= nn.BatchNorm2d(hidden_dim)
        self.BN_2= nn.BatchNorm2d(hidden_dim)
        self.BN_3= nn.BatchNorm2d(output_size)
        self.BN_4= nn.BatchNorm2d(output_size)
        self.pool_1 = nn.MaxPool2d(kernel_size=(2,2))
        self.pool_2 = nn.MaxPool2d(kernel_size=(1,2))

        # Fully connected layers
        self.fc1 = nn.Linear(512, 64)
        self.dropout1 = nn.Dropout(dropout)
        self.fc2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(dropout)
        self.flatten=nn.Flatten()

    def forward(self, x):

        x = x.transpose(1, 3)  # reshape from (batch_size, seq_len, input_size) to (batch_size, input_size, seq_len)
        x = F.relu(self.conv1(x))
        x = self.BN_1(x)
        x = self.pool_1(x)
        x = F.relu(self.conv2(x))
        x = self.BN_2(x)
        x = self.pool_1(x)
        x = F.relu(self.conv3(x))
        x = self.BN_3(x)
        x = self.pool_2(x)
        x = F.relu(self.conv4(x))
        x = self.BN_4(x)
        x = self.pool_2(x)

        # print(x.shape)

        x = x.transpose(1, 3)  # reshape back to (batch_size, seq_len, output_size)

        # print(x.shape)


        x = F.relu(self.fc1(x))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)

        # print(x.shape)
        # x = self.flatten(x)


        return x

class conv2d_model(nn.Module):
    def __init__(self, input_2D):
        super(conv2d_model, self).__init__()

        self.BN_2= nn.BatchNorm2d(input_2D, affine=False)
        self.conv2d = Encoder_CNN_2D(input_2D,0.05)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(96, 5*50)

    def forward(self, inputs_2D_N):

        inputs_2D_N_1=inputs_2D_N.transpose(1,3)
        inputs_2D_N_2=self.BN_2(inputs_2D_N_1)
        inputs_2D_N_3=inputs_2D_N_2.transpose(1,3)

        x=self.conv2d(inputs_2D_N_3)
        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = conv2d_model(8)




mm_early_conv2d = train_mm_early_IMU_2D(train_loader, lr, 40, model, path +'Conv2D_IMU_feet_pelvis_shanks_thighs_trunk.pth')

mm_early_conv2d= conv2d_model(8)
mm_early_conv2d.load_state_dict(torch.load(path+'Conv2D_IMU_feet_pelvis_shanks_thighs_trunk.pth'))
mm_early_conv2d.to(device)

mm_early_conv2d.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        # # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        output= mm_early_conv2d(data_2D.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_19=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(48*15)



mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Feet_Pelvis_shanks_thighs_trunks.pth')

mm_early_ffn_hf= FFN_HF(48*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Feet_Pelvis_shanks_thighs_trunks.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        # data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_20=np.hstack([rmse,p])

"""# 8 IMUs + 2D joint points

## Data processing
"""

"""# Feature Extraction """
import numpy as np
from scipy.stats import skew, kurtosis
from statsmodels.robust.scale import mad

def feature_extractor(data):
  feat=[]
  feat_final=[]

  for i in range(92):

      signal=data[:,:,i]
      A_1=np.mean(signal,axis=1)
      A_2=np.sqrt(np.mean(signal ** 2,axis=1))
      A_3=np.min(signal,axis=1)   ## max- Statistical
      A_4=np.max(signal,axis=1)   ## min- Statistical
      A_5=np.mean(np.absolute(signal),axis=1)   ## mean- Statistical
      A_6=np.std(signal,axis=1)  ## standard Deviation- Statistical
      A_7=np.mean(np.abs(np.diff(signal,prepend=data[:,0:1,i],axis=1)),axis=1) ## Mean Absolute Difference
      A_8=np.mean(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1) ## Mean Absolute Difference
      A_9=np.median(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1) ## Mean  Difference
      A_10=np.median(np.abs(np.diff(signal,prepend=data[:,0:1,i],axis=1)),axis=1) ## Mean Absolute Difference
      A_11=np.percentile(signal, 75,axis=1) - np.percentile(signal, 25,axis=1)  # Interquartile Range-- Statistical
      # Calculate robust skewness using median and MAD
      A_12 = skew(signal, axis=1, nan_policy='omit')
      # Calculate robust kurtosis using scipy's kurtosis and numpy's percentile
      percentiles = np.percentile(signal, [25, 50, 75], axis=1, interpolation='midpoint')
      A_13 = kurtosis(signal, axis=1, nan_policy='omit') + 3 * (percentiles[2] - percentiles[0])**2 / (percentiles[1] - percentiles[0])**2

      A_14=np.median(signal,axis=1) ## median- Statistical
      A_15=np.var(signal,axis=1)
      median = np.median(signal, axis=1)
      A_16 = np.median(np.abs(signal - median[:, np.newaxis]), axis=1)
      # A_16=scipy.stats.median_absolute_deviation(signal,axis=1,scale=1)
      A_17=np.mean(np.abs(signal - np.mean(signal, axis=1).reshape(signal.shape[0],1)), axis=1)
      A_18=np.mean(np.diff(signal,prepend=data[:,0:1,i],axis=1),axis=1)
      dif=np.diff(data[:,:,i],prepend=data[:,0:1,i],axis=1)
      A_19=np.sum(np.absolute(dif),axis=1)  ### Waveform length
      A_20=np.sum(np.absolute(dif>0),axis=1)  ### Zero Crossing
      A_21=np.sum(np.absolute(np.diff(dif,prepend=data[:,0:1,i],axis=1))>0,axis=1)  ## Slope Sign Changes

      # feat=np.vstack((A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,A_16,A_15))
      feat=np.vstack((A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_14,A_15,A_16,A_17))

      # feat=np.vstack((A_18,A_19,A_20))
      feat_final.append((feat))
  feat_final=np.array(feat_final)
  feat_final_1=feat_final.reshape([feat_final.shape[0]*feat_final.shape[1],feat_final.shape[-1]])
  feat_final_1=np.transpose(feat_final_1)

  return(feat_final_1)



import scipy

X_train_feat=feature_extractor(train_X_1D)
X_test_feat=feature_extractor(test_X_1D)
X_validation_feat=feature_extractor(X_validation_1D)

print(X_train_feat.shape)

# Check if there are any NaN values
has_nan = np.sum(np.isnan(X_train_feat))
print(has_nan)

# Check which columns have NaN values
nan_columns = np.where(np.any(np.isnan(X_train_feat), axis=0))[0]

print("Column numbers with NaN values:")
print(nan_columns)

print(train_X_1D.shape)

# Calculate the column-wise mean
column_means = np.nanmean(X_train_feat, axis=0)

print(column_means.shape)

# Find NaN indices for each column
nan_indices = np.isnan(X_train_feat)

# Replace NaN values in each column with column means
for col_index in range(X_train_feat.shape[1]):
    X_train_feat[nan_indices[:, col_index], col_index] = column_means[col_index]


# Convert back to PyTorch tensor
X_train_feat = torch.tensor(X_train_feat)


##############################################################################

# Calculate the column-wise mean
column_means = np.nanmean(X_test_feat, axis=0)

# Find NaN indices for each column
nan_indices = np.isnan(X_test_feat)

# Replace NaN values in each column with column means
for col_index in range(X_test_feat.shape[1]):
    X_test_feat[nan_indices[:, col_index], col_index] = column_means[col_index]


# Convert back to PyTorch tensor
X_test_feat = torch.tensor(X_test_feat)

##############################################################################

# Calculate the column-wise mean
column_means = np.nanmean(X_validation_feat, axis=0)

# Find NaN indices for each column
nan_indices = np.isnan(X_validation_feat)

# Replace NaN values in each column with column means
for col_index in range(X_validation_feat.shape[1]):
    X_validation_feat[nan_indices[:, col_index], col_index] = column_means[col_index]


# Convert back to PyTorch tensor
X_validation_feat = torch.tensor(X_validation_feat)

# X_train_feat=torch.Tensor(X_train_feat)
# X_test_feat=torch.Tensor(X_test_feat)
# X_validation_feat=torch.Tensor(X_validation_feat)

train_feat = TensorDataset(X_train_feat,train_features_2D, train_features_acc_8,train_features_gyr_8, train_features_2D_point, train_targets)
val_feat = TensorDataset(X_validation_feat, val_features_2D, val_features_acc_8, val_features_gyr_8, val_features_2D_point,val_targets)
test_feat = TensorDataset(X_test_feat,test_features_2D, test_features_acc_8, test_features_gyr_8, test_features_2D_point, test_targets)

train_loader_feat = DataLoader(train_feat, batch_size=batch_size, shuffle=True, drop_last=False)
val_loader_feat = DataLoader(val_feat, batch_size=batch_size, shuffle=True, drop_last=False)
test_loader_feat = DataLoader(test_feat, batch_size=batch_size, shuffle=False, drop_last=False)

print(X_train_feat.shape)

"""## Training Function"""

def train_mm_early_IMU(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader):
            optimizer.zero_grad()
            # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
            # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

            data=torch.cat((data, data_2D_joint),dim=-1)

            output= model(data.to(device).float())

            # l2_regularization = 0.0
            # for param in model.parameters():
            #     l2_regularization += torch.norm(param, p=2)  # Compute the L2 norm of the parameter


            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader:

                # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
                # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

                data=torch.cat((data, data_2D_joint),dim=-1)

                output= model(data.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")


    return model

def train_mm_early_IMU_feat(train_loader, learn_rate, EPOCHS, model,filename):

    if torch.cuda.is_available():
      model.cuda()
    # Defining loss function and optimizer
    # criterion =nn.MSELoss()
    criterion =RMSELoss()

    # criterion=PearsonCorrLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=learn_rate)

    # optimizer = torch.optim.Adam(model.parameters())


    running_loss=0
    # Train the model
    start_time = time.time()

    # Train the model with early stopping
    best_val_loss = float('inf')
    patience = 10


    for epoch in range(EPOCHS):
        epoch_start_time = time.time()
        model.train()
        for i, (data, data_2D, data_acc, data_gyr, data_2D_joint, target) in enumerate(train_loader_feat):

            optimizer.zero_grad()

            output= model(data.to(device).float())

            loss = criterion(output, target.to(device).float())
            loss.backward()
            optimizer.step()


            running_loss += loss.item()

        train_loss=running_loss/len(train_loader)

       # Validate
        model.eval()
        val_loss = 0
        with torch.no_grad():
            for data, data_2D, data_acc, data_gyr, data_2D_joint, target in val_loader_feat:

                output= model(data.to(device).float())
                val_loss += criterion(output, target.to(device).float())

        val_loss /= len(val_loader)

        epoch_end_time = time.time()
        epoch_training_time = epoch_end_time - epoch_start_time

        print(f"Epoch: {epoch+1}, time: {epoch_training_time:.4f}, Training Loss: {train_loss:.4f},  Validation loss: {val_loss:.4f}")

        running_loss=0

        epoch_end_time = time.time()

                # Check if the validation loss has improved
        if val_loss < best_val_loss:
            best_val_loss = val_loss
            torch.save(model.state_dict(), filename)
            patience_counter = 0
        else:
            patience_counter += 1

        # Early stopping if the validation loss hasn't improved for `patience` epochs
        if patience_counter >= patience:
            print(f"Stopping early after {epoch+1} epochs")
            break


    end_time = time.time()

    training_time = end_time - start_time
    print(f"Training time: {training_time} seconds")



    return model

"""## FFN"""

class FFN(nn.Module):
    def __init__(self, input_1D):
        super(FFN, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128*50, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN(92)



mm_early_ffn = train_mm_early_IMU(train_loader, lr,40,model,path + 'FFN_IMUs_Videos.pth')

mm_early_ffn= FFN(92)
mm_early_ffn.load_state_dict(torch.load(path+'FFN_IMUs_Videos.pth'))
mm_early_ffn.to(device)

mm_early_ffn.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        data=torch.cat((data,data_2D_joint),dim=-1)

        output= mm_early_ffn(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_21=np.hstack([rmse,p])

"""## LSTM"""

class Encoder(nn.Module):
    def __init__(self, input_dim, dropout):
        super(Encoder, self).__init__()
        self.lstm_1 = nn.LSTM(input_dim, 512, bidirectional=False, batch_first=True, dropout=0.0)
        self.lstm_2 = nn.LSTM(512, 256, bidirectional=False, batch_first=True, dropout=0.0)
        self.flatten=nn.Flatten()
        self.dropout=nn.Dropout(dropout)


    def forward(self, x):
        out_1, _ = self.lstm_1(x)
        out_1=self.dropout(out_1)
        out_2, _ = self.lstm_2(out_1)
        out_2=self.dropout(out_2)
        out_2=self.flatten(out_2)


        return out_2

class lstm_model(nn.Module):
    def __init__(self, input_1D):
        super(lstm_model, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)
        self.lstm = Encoder(input_1D,0.40)
        self.flatten=nn.Flatten()
        self.fc_f=nn.Linear(256*50, 5*50)

    def forward(self, inputs_1D_N):

        inputs_1D_N_1=inputs_1D_N.view(inputs_1D_N.size(0)*inputs_1D_N.size(1),inputs_1D_N.size(-1))
        inputs_1D_N_1=self.BN(inputs_1D_N_1)
        inputs_1D_N=inputs_1D_N_1.view(-1, 50, inputs_1D_N_1.size(-1))

        x=self.lstm(inputs_1D_N)
        x=self.flatten(x)
        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = lstm_model(92)




mm_early_lstm = train_mm_early_IMU(train_loader, lr, 40, model, path +'LSTM_IMUs_video.pth')

mm_early_lstm= lstm_model(92)
mm_early_lstm.load_state_dict(torch.load(path+'LSTM_IMUs_video.pth'))
mm_early_lstm.to(device)

mm_early_lstm.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader):

        # data_1D=torch.cat((data[:,:,6:30],data[:,:,30:48]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,1:5],data_2D[:,:,:,5:8]),dim=-1)

        data=torch.cat((data,data_2D_joint),dim=-1)

        output= mm_early_lstm(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_22=np.hstack([rmse,p])

"""## FFN (HF)"""

class FFN_HF(nn.Module):
    def __init__(self, input_1D):
        super(FFN_HF, self).__init__()

        self.BN= nn.BatchNorm1d(input_1D, affine=False)

        self.fc1 = nn.Linear(input_1D, 512)
        self.dropout1 = nn.Dropout(0.05)
        self.fc2 = nn.Linear(512, 256)
        self.dropout2 = nn.Dropout(0.05)
        self.fc3 = nn.Linear(256, 128)
        self.dropout3 = nn.Dropout(0.05)

        self.flatten=nn.Flatten()

        self.fc_f=nn.Linear(128, 5*50)


    def forward(self, inputs_1D_N):

        inputs_1D_N=self.BN(inputs_1D_N)

        x = F.relu(self.fc1(inputs_1D_N))
        x = self.dropout1(x)
        x = F.relu(self.fc2(x))
        x = self.dropout2(x)
        x = F.relu(self.fc3(x))
        x = self.dropout3(x)

        x=self.flatten(x)

        x = self.fc_f(x).view(-1,50,5)

        return x

lr = 3e-4
model = FFN_HF(92*15)

# Count the number of parameters
total_params = sum(p.numel() for p in model.parameters())
print(f"Total number of parameters: {total_params/1000000}")

# Calculate model size in megabytes
total_size_MB = total_params * 4 / (1024 * 1024)  # Assuming float32 tensors

print(f"Total size: {total_size_MB}")

import sys
sys.exit()

mm_early_ffn_hf = train_mm_early_IMU_feat(train_loader, lr,40,model,path + 'FFN_HF_Imus_video.pth')

mm_early_ffn_hf= FFN_HF(92*15)
mm_early_ffn_hf.load_state_dict(torch.load(path+'FFN_HF_Imus_video.pth'))
mm_early_ffn_hf.to(device)

mm_early_ffn_hf.eval()

# iterate through batches of test data
with torch.no_grad():
    for i, (data, data_2D, data_acc, data_gyr, data_2D_joint,target) in enumerate(test_loader_feat):

        # data_1D=torch.cat((data[:,6*15:30*15],data[:,30*15:48*15]),dim=-1)
        # data_2D=torch.cat((data_2D[:,:,:,2:3],data_2D[:,:,:,5:6]),dim=-1)

        output= mm_early_ffn_hf(data.to(device).float())
        if i==0:
          yhat_5=output
          test_target=target

        yhat_5=torch.cat((yhat_5,output),dim=0)
        test_target=torch.cat((test_target,target),dim=0)

        # clear memory
        del data, target,output
        torch.cuda.empty_cache()


yhat_4 = yhat_5.detach().cpu().numpy()
test_target = test_target.detach().cpu().numpy()
print(yhat_4.shape)

rmse, p, Z_1,Z_2,Z_3,Z_4,Z_5=RMSE_prediction(yhat_4,test_target,s)

ablation_23=np.hstack([rmse,p])

